import json
import os
import logging
import asyncio
from typing import Dict, Any
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import time

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

CONFIG = {
    'token': os.getenv('BOT_TOKEN'),
    'ip_api_url': 'https://api.ipify.org?format=json',
    'data_file': 'user_data.json'
}

class PizzaStates(StatesGroup):
    main_menu = State()
    choosing_dough = State()
    choosing_toppings = State()

def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PizzaBot (aiogram)...")

    if not CONFIG['token']:
        raise ValueError("‚ùå –¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù")

    data_file = CONFIG['data_file']
    if not os.path.exists(data_file):
        print(f"üìÅ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª {data_file}...")
        initial_data = {"users": []}
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(initial_data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    else:
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(data.get('users', []))}")
        except:
            print("‚ö†Ô∏è –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
            initial_data = {"users": []}
            with open(data_file, 'w', encoding='utf-8') as f:
                json.dump(initial_data, f, indent=2, ensure_ascii=False)

    print("üöÄ PizzaBot –≥–æ—Ç–æ–≤!")
    print("=" * 40)

class PizzaBot:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.bot = Bot(token=config['token'])
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.router = Router()
        self.dp.include_router(self.router)
        self.setup_handlers()

    async def get_user_ip(self):
        """–ü–æ–ª—É—á–∞–µ–º IP —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 2
        timeout = aiohttp.ClientTimeout(total=10)

        for attempt in range(max_retries):
            try:
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get(self.config['ip_api_url']) as response:
                        if response.status == 200:
                            data = await response.json()
                            ip = data.get('ip')
                            print(f"‚úÖ IP –ø–æ–ª—É—á–µ–Ω: {ip}")
                            return ip
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(1)

        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP")
        return None

    def save_user_data(self, user_id, username, ip_address):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if os.path.exists(self.config['data_file']):
                with open(self.config['data_file'], 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {"users": []}

            user_entry = {
                "user_id": user_id,
                "username": username,
                "ip_address": ip_address,
                "timestamp": time.time()
            }

            user_found = False
            for user in data["users"]:
                if user["user_id"] == user_id:
                    user.update(user_entry)
                    user_found = True
                    break

            if not user_found:
                data["users"].append(user_entry)

            with open(self.config['data_file'], 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ID={user_id}, IP={ip_address}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    async def send_quick_response(self, message, text, reply_markup=None):
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await message.answer(text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    def create_main_menu_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton(text="üçï –°–û–ó–î–ê–¢–¨ –ü–ò–¶–¶–£", callback_data="create_pizza")],
            [InlineKeyboardButton(text="üìñ –†–ï–¶–ï–ü–¢–´", callback_data="recipes")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ë–û–¢–ï", callback_data="about")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    def create_dough_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton(text="üßÇ –ö–õ–ê–°–°–ò–ß–ï–°–ö–û–ï", callback_data="dough_classic")],
            [InlineKeyboardButton(text="üåæ –¢–û–ù–ö–û–ï", callback_data="dough_thin")],
            [InlineKeyboardButton(text="üçï –¢–û–õ–°–¢–û–ï", callback_data="dough_thick")],
            [InlineKeyboardButton(text="üîô –ù–ê–ó–ê–î", callback_data="back_main")]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    def create_toppings_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∫–∏"""
        keyboard = [
            [InlineKeyboardButton(text="üçÖ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å", callback_data="topping_sauce")],
            [InlineKeyboardButton(text="üßÄ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞", callback_data="topping_cheese")],
            [InlineKeyboardButton(text="üçñ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏", callback_data="topping_pepperoni")],
            [InlineKeyboardButton(text="üçÑ –ì—Ä–∏–±—ã", callback_data="topping_mushrooms")],
            [InlineKeyboardButton(text="ü´í –û–ª–∏–≤–∫–∏", callback_data="topping_olives")],
            [
                InlineKeyboardButton(text="‚úÖ –ì–û–¢–û–í–û", callback_data="toppings_done"),
                InlineKeyboardButton(text="üîô –ù–ê–ó–ê–î", callback_data="back_dough")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    async def start_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        print(f"üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP
        asyncio.create_task(self.get_and_save_ip(user.id, user.username))

        welcome_text = """
üçï *PIZZAMASTER* üçï

*–°–æ–∑–¥–∞–π —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∏—Ü—Ü—É!*

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: üëá
        """

        await self.send_quick_response(
            message,
            welcome_text,
            self.create_main_menu_keyboard()
        )
        await state.set_state(PizzaStates.main_menu)

    async def get_and_save_ip(self, user_id, username):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IP"""
        ip = await self.get_user_ip()
        if ip:
            self.save_user_data(user_id, username or "Unknown", ip)

    async def main_menu(self, callback: CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await callback.answer()

        menu_text = """
üçï *–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ*

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: üëá
        """

        await callback.message.edit_text(
            menu_text,
            reply_markup=self.create_main_menu_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    async def create_pizza_start(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü—ã"""
        await callback.answer()

        await state.update_data(toppings=[])

        pizza_text = """
üéâ *–°–û–ó–î–ê–ï–ú –ü–ò–¶–¶–£!*

–í—ã–±–µ—Ä–∏ –æ—Å–Ω–æ–≤—É: üçû
        """

        await callback.message.edit_text(
            pizza_text,
            reply_markup=self.create_dough_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.choosing_dough)

    async def choose_dough(self, callback: CallbackQuery, state: FSMContext):
        """–í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞"""
        await callback.answer()

        dough_type = callback.data.replace("dough_", "")
        dough_names = {
            "classic": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ",
            "thin": "–¢–æ–Ω–∫–æ–µ —Ç–µ—Å—Ç–æ",
            "thick": "–¢–æ–ª—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ"
        }

        await state.update_data(dough=dough_names.get(dough_type, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ"))

        toppings_text = """
ü•ó *–í–´–ë–ï–†–ò –ù–ê–ß–ò–ù–ö–£:*

–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ! ‚úÖ
        """

        await callback.message.edit_text(
            toppings_text,
            reply_markup=self.create_toppings_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.choosing_toppings)

    async def handle_toppings(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–æ–∫"""
        user_data = await state.get_data()
        toppings = user_data.get('toppings', [])

        if callback.data == "toppings_done":
            await self.finalize_pizza(callback, state)
            return
        elif callback.data == "back_dough":
            await self.create_pizza_start(callback, state)
            return

        topping = callback.data.replace("topping_", "")
        topping_names = {
            "sauce": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å",
            "cheese": "–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞",
            "pepperoni": "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏",
            "mushrooms": "–ì—Ä–∏–±—ã",
            "olives": "–û–ª–∏–≤–∫–∏"
        }

        topping_name = topping_names.get(topping, topping)

        if topping_name in toppings:
            toppings.remove(topping_name)
            await callback.answer(f"‚ùå {topping_name} —É–¥–∞–ª–µ–Ω")
        else:
            toppings.append(topping_name)
            await callback.answer(f"‚úÖ {topping_name} –¥–æ–±–∞–≤–ª–µ–Ω")

        await state.update_data(toppings=toppings)

        current_toppings = ", ".join(toppings) if toppings else "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ"

        toppings_text = f"""
ü•ó *–í–´–ë–†–ê–ù–û:*

`{current_toppings}`

–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–∏—Ä–∞—Ç—å: üëá
        """

        await callback.message.edit_text(
            toppings_text,
            reply_markup=self.create_toppings_keyboard(),
            parse_mode='Markdown'
        )

    async def finalize_pizza(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü—ã"""
        await callback.answer()

        user_data = await state.get_data()
        dough = user_data.get('dough', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ')
        toppings = user_data.get('toppings', [])

        if not toppings:
            toppings = ["—Å—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞"]

        pizza_description = f"""
üéä *–¢–í–û–Ø –ü–ò–¶–¶–ê –ì–û–¢–û–í–ê!* üéä

üçï *–û–°–ù–û–í–ê:* {dough}
ü•ó *–ù–ê–ß–ò–ù–ö–ê:* {', '.join(toppings)}

üî• *–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–µ—á—å...*
‚è∞ *–ì–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é!*

üçΩÔ∏è *–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!* üòã
        """

        keyboard = [
            [InlineKeyboardButton(text="üçï –ï–©–ï –ü–ò–¶–¶–£", callback_data="create_pizza")],
            [InlineKeyboardButton(text="üîô –ú–ï–ù–Æ", callback_data="back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            pizza_description,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    async def show_recipes(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        await callback.answer()

        recipes_text = """
üìñ *–ü–û–ü–£–õ–Ø–†–ù–´–ï –†–ï–¶–ï–ü–¢–´:*

üçï *–ú–ê–†–ì–ê–†–ò–¢–ê:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –ë–∞–∑–∏–ª–∏–∫

üçï *–ü–ï–ü–ü–ï–†–û–ù–ò:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏

üçï *–ì–†–ò–ë–ù–ê–Ø:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –ì—Ä–∏–±—ã
        """

        keyboard = [
            [InlineKeyboardButton(text="üçï –°–û–ó–î–ê–¢–¨ –ü–ò–¶–¶–£", callback_data="create_pizza")],
            [InlineKeyboardButton(text="üîô –ú–ï–ù–Æ", callback_data="back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            recipes_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    async def show_about(self, callback: CallbackQuery, state: FSMContext):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        await callback.answer()

        about_text = """
‚ÑπÔ∏è *PIZZAMASTER*

*–°–æ–∑–¥–∞–≤–∞–π –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∏—Ü—Ü—É!* üçï

‚ú® *–ß—Ç–æ —É–º–µ—é:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–∏—Ü—Ü—ã
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º

*–ë—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ!* üöÄ
        """

        keyboard = [
            [InlineKeyboardButton(text="üçï –°–û–ó–î–ê–¢–¨ –ü–ò–¶–¶–£", callback_data="create_pizza")],
            [InlineKeyboardButton(text="üîô –ú–ï–ù–Æ", callback_data="back_main")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await callback.message.edit_text(
            about_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.router.message.register(self.start_command, Command("start"))

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.router.callback_query.register(self.main_menu, F.data == "back_main", PizzaStates.main_menu)
        self.router.callback_query.register(self.create_pizza_start, F.data == "create_pizza", PizzaStates.main_menu)
        self.router.callback_query.register(self.show_recipes, F.data == "recipes", PizzaStates.main_menu)
        self.router.callback_query.register(self.show_about, F.data == "about", PizzaStates.main_menu)

        # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
        self.router.callback_query.register(self.main_menu, F.data == "back_main", PizzaStates.choosing_dough)
        self.router.callback_query.register(self.choose_dough, F.data.startswith("dough_"), PizzaStates.choosing_dough)

        # –í—ã–±–æ—Ä –Ω–∞—á–∏–Ω–∫–∏
        self.router.callback_query.register(self.create_pizza_start, F.data == "back_dough", PizzaStates.choosing_toppings)
        self.router.callback_query.register(self.handle_toppings, F.data.startswith("topping_"), PizzaStates.choosing_toppings)
        self.router.callback_query.register(self.handle_toppings, F.data == "toppings_done", PizzaStates.choosing_toppings)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            print("üéØ PizzaBot (aiogram) –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
            print("=" * 40)

            await self.dp.start_polling(self.bot)
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.bot.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        initialize_bot()
        bot = PizzaBot(CONFIG)
        await bot.run()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
