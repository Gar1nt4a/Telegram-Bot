import json
import os
import logging
import asyncio
from typing import Dict, Any
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, Text
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
import time

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

CONFIG = {
    'token': os.getenv('BOT_TOKEN'),
    'ip_api_url': 'https://api.ipify.org?format=json',
    'data_file': 'user_data.json'
}

class PizzaStates(StatesGroup):
    main_menu = State()
    choosing_dough = State()
    choosing_toppings = State()
    recipes_menu = State()
    about_menu = State()

def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PizzaBot (–∫–Ω–æ–ø–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")

    if not CONFIG['token']:
        raise ValueError("‚ùå –¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù")

    data_file = CONFIG['data_file']
    if not os.path.exists(data_file):
        print(f"üìÅ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª {data_file}...")
        initial_data = {"users": []}
        with open(data_file, 'w', encoding='utf-8') as f:
            json.dump(initial_data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω")
    else:
        try:
            with open(data_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(data.get('users', []))}")
        except:
            print("‚ö†Ô∏è –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π...")
            initial_data = {"users": []}
            with open(data_file, 'w', encoding='utf-8') as f:
                json.dump(initial_data, f, indent=2, ensure_ascii=False)

    print("üöÄ PizzaBot –≥–æ—Ç–æ–≤!")
    print("=" * 40)

class PizzaBot:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.bot = Bot(token=config['token'])
        self.storage = MemoryStorage()
        self.dp = Dispatcher(storage=self.storage)
        self.router = Router()
        self.dp.include_router(self.router)
        self.setup_handlers()

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    def main_menu_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [KeyboardButton(text="üçï –°–æ–∑–¥–∞—Ç—å –ø–∏—Ü—Ü—É"), KeyboardButton(text="üìñ –†–µ—Ü–µ–ø—Ç—ã")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    def dough_keyboard(self):
        """–í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞"""
        keyboard = [
            [KeyboardButton(text="üßÇ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ"), KeyboardButton(text="üåæ –¢–æ–Ω–∫–æ–µ —Ç–µ—Å—Ç–æ")],
            [KeyboardButton(text="üçï –¢–æ–ª—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    def toppings_keyboard(self):
        """–í—ã–±–æ—Ä –Ω–∞—á–∏–Ω–∫–∏"""
        keyboard = [
            [KeyboardButton(text="üçÖ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å"), KeyboardButton(text="üßÄ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞")],
            [KeyboardButton(text="üçñ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏"), KeyboardButton(text="üçÑ –ì—Ä–∏–±—ã")],
            [KeyboardButton(text="ü´í –û–ª–∏–≤–∫–∏"), KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    def recipes_keyboard(self):
        """–ú–µ–Ω—é —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        keyboard = [
            [KeyboardButton(text="üçï –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"), KeyboardButton(text="üçï –ü–µ–ø–ø–µ—Ä–æ–Ω–∏")],
            [KeyboardButton(text="üçï –ì—Ä–∏–±–Ω–∞—è"), KeyboardButton(text="üçï –ì–∞–≤–∞–π—Å–∫–∞—è")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    def back_only_keyboard(self):
        """–¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        keyboard = [[KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    async def get_user_ip(self):
        """–ü–æ–ª—É—á–∞–µ–º IP —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_retries = 2
        timeout = aiohttp.ClientTimeout(total=10)

        for attempt in range(max_retries):
            try:
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get(self.config['ip_api_url']) as response:
                        if response.status == 200:
                            data = await response.json()
                            ip = data.get('ip')
                            print(f"‚úÖ IP –ø–æ–ª—É—á–µ–Ω: {ip}")
                            return ip
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(1)

        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP")
        return None

    def save_user_data(self, user_id, username, ip_address):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if os.path.exists(self.config['data_file']):
                with open(self.config['data_file'], 'r', encoding='utf-8') as f:
                    data = json.load(f)
            else:
                data = {"users": []}

            user_entry = {
                "user_id": user_id,
                "username": username,
                "ip_address": ip_address,
                "timestamp": time.time()
            }

            user_found = False
            for user in data["users"]:
                if user["user_id"] == user_id:
                    user.update(user_entry)
                    user_found = True
                    break

            if not user_found:
                data["users"].append(user_entry)

            with open(self.config['data_file'], 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ID={user_id}, IP={ip_address}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    async def start_command(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = message.from_user
        print(f"üéÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP
        asyncio.create_task(self.get_and_save_ip(user.id, user.username))

        welcome_text = """
üçï *PIZZAMASTER* üçï

*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–∏—Ü—Ü—ã!*

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Å–∞–º—É—é –≤–∫—É—Å–Ω—É—é –ø–∏—Ü—Ü—É –ø–æ —Ç–≤–æ–µ–º—É –≤–∫—É—Å—É!

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:* üëá
        """

        await message.answer(
            welcome_text,
            reply_markup=self.main_menu_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    async def get_and_save_ip(self, user_id, username):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è IP"""
        ip = await self.get_user_ip()
        if ip:
            self.save_user_data(user_id, username or "Unknown", ip)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    async def handle_create_pizza(self, message: Message, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü—ã"""
        await state.update_data(toppings=[])

        pizza_text = """
üéâ *–û–¢–õ–ò–ß–ù–û! –î–ê–í–ê–ô–¢–ï –°–û–ó–î–ê–î–ò–ú –ü–ò–¶–¶–£!* üéâ

*–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Å–Ω–æ–≤—ã –¥–ª—è —Ç–≤–æ–µ–π –ø–∏—Ü—Ü—ã:* üçû
        """

        await message.answer(
            pizza_text,
            reply_markup=self.dough_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.choosing_dough)

    async def handle_recipes(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        recipes_text = """
üìñ *–ü–û–ü–£–õ–Ø–†–ù–´–ï –†–ï–¶–ï–ü–¢–´*

–í—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: üëá
        """

        await message.answer(
            recipes_text,
            reply_markup=self.recipes_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.recipes_menu)

    async def handle_about(self, message: Message, state: FSMContext):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        about_text = """
‚ÑπÔ∏è *–û –ë–û–¢–ï PIZZAMASTER*

*–°–æ–∑–¥–∞–≤–∞–π –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∏—Ü—Ü—É –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ!* üçï

‚ú® *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–∏—Ü—Ü—ã
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤

*–ë—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ, —É–¥–æ–±–Ω–æ!* üöÄ
        """

        await message.answer(
            about_text,
            reply_markup=self.back_only_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.about_menu)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
    async def handle_dough_selection(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞"""
        dough_text = message.text
        dough_mapping = {
            "üßÇ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ",
            "üåæ –¢–æ–Ω–∫–æ–µ —Ç–µ—Å—Ç–æ": "–¢–æ–Ω–∫–æ–µ —Ç–µ—Å—Ç–æ",
            "üçï –¢–æ–ª—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ": "–¢–æ–ª—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ"
        }

        dough = dough_mapping.get(dough_text)
        if dough:
            await state.update_data(dough=dough)

            toppings_text = f"""
üßë‚Äçüç≥ *–û–¢–õ–ò–ß–ù–´–ô –í–´–ë–û–†!*

*–û—Å–Ω–æ–≤–∞:* {dough}

*–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∞—á–∏–Ω–∫—É:* ü•ó

üéØ *–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤!*
–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å
            """

            await message.answer(
                toppings_text,
                reply_markup=self.toppings_keyboard(),
                parse_mode='Markdown'
            )
            await state.set_state(PizzaStates.choosing_toppings)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–µ—Å—Ç–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∫–∏
    async def handle_toppings_selection(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∏–Ω–∫–∏"""
        user_data = await state.get_data()
        toppings = user_data.get('toppings', [])
        current_topping = message.text

        topping_mapping = {
            "üçÖ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å": "–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å",
            "üßÄ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞": "–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞",
            "üçñ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏",
            "üçÑ –ì—Ä–∏–±—ã": "–ì—Ä–∏–±—ã",
            "ü´í –û–ª–∏–≤–∫–∏": "–û–ª–∏–≤–∫–∏"
        }

        if current_topping in topping_mapping:
            topping_name = topping_mapping[current_topping]

            if topping_name in toppings:
                toppings.remove(topping_name)
                await message.answer(f"‚ùå *{topping_name}* —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–∞—á–∏–Ω–∫–∏", parse_mode='Markdown')
            else:
                toppings.append(topping_name)
                await message.answer(f"‚úÖ *{topping_name}* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∏–Ω–∫—É", parse_mode='Markdown')

            await state.update_data(toppings=toppings)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä
            current_selection = ", ".join(toppings) if toppings else "–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            selection_text = f"""
*–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –Ω–∞—á–∏–Ω–∫–∏:*
`{current_selection}`

–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏ *‚úÖ –ì–æ—Ç–æ–≤–æ*
            """

            await message.answer(
                selection_text,
                reply_markup=self.toppings_keyboard(),
                parse_mode='Markdown'
            )

        elif current_topping == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            await self.finalize_pizza(message, state)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ üëá")

    async def finalize_pizza(self, message: Message, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ü—Ü—ã"""
        user_data = await state.get_data()
        dough = user_data.get('dough', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ')
        toppings = user_data.get('toppings', [])

        if not toppings:
            toppings = ["–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞"]

        pizza_description = f"""
üéä *–¢–í–û–Ø –ü–ò–¶–¶–ê –ì–û–¢–û–í–ê!* üéä

*–í–æ—Ç —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:*

üçï *–û–°–ù–û–í–ê:* {dough}
ü•ó *–ù–ê–ß–ò–ù–ö–ê:* {', '.join(toppings)}

üî• *–ü–∏—Ü—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–µ—á—å!*
üë®‚Äçüç≥ *–ì–æ—Ç–æ–≤–∏–º —Å –ª—é–±–æ–≤—å—é...*

‚è∞ *–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–π–º–µ—Ç 15-20 –º–∏–Ω—É—Ç*

üçΩÔ∏è *–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!* üòã
        """

        await message.answer(
            pizza_description,
            reply_markup=self.main_menu_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤
    async def handle_recipe_detail(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞"""
        recipe = message.text
        recipes = {
            "üçï –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": """
üçï *–ú–ê–†–ì–ê–†–ò–¢–ê*

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –°–≤–µ–∂–∏–π –±–∞–∑–∏–ª–∏–∫
‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ

*–ö–ª–∞—Å—Å–∏–∫–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏!*
            """,
            "üçï –ü–µ–ø–ø–µ—Ä–æ–Ω–∏": """
üçï *–ü–ï–ü–ü–ï–†–û–ù–ò*

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏
‚Ä¢ –û—Ä–µ–≥–∞–Ω–æ

*–û—Å—Ç—Ä–∞—è –∏ –∞—Ä–æ–º–∞—Ç–Ω–∞—è!*
            """,
            "üçï –ì—Ä–∏–±–Ω–∞—è": """
üçï *–ì–†–ò–ë–ù–ê–Ø*

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –®–∞–º–ø–∏–Ω—å–æ–Ω—ã
‚Ä¢ –ß–µ—Å–Ω–æ–∫

*–ù–µ–∂–Ω–∞—è –∏ –∞—Ä–æ–º–∞—Ç–Ω–∞—è!*
            """,
            "üçï –ì–∞–≤–∞–π—Å–∫–∞—è": """
üçï *–ì–ê–í–ê–ô–°–ö–ê–Ø*

*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*
‚Ä¢ –¢–æ–º–∞—Ç–Ω—ã–π —Å–æ—É—Å
‚Ä¢ –°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞
‚Ä¢ –í–µ—Ç—á–∏–Ω–∞
‚Ä¢ –ê–Ω–∞–Ω–∞—Å—ã

*–°–ª–∞–¥–∫–∞—è –∏ –Ω–µ–æ–±—ã—á–Ω–∞—è!*
            """
        }

        if recipe in recipes:
            await message.answer(
                recipes[recipe],
                reply_markup=self.recipes_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    async def handle_back_to_main(self, message: Message, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        menu_text = """
üçï *–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ PIZZAMASTER*

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:* üëá
        """

        await message.answer(
            menu_text,
            reply_markup=self.main_menu_keyboard(),
            parse_mode='Markdown'
        )
        await state.set_state(PizzaStates.main_menu)

    async def handle_back_to_dough(self, message: Message, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Å—Ç–∞"""
        await self.handle_create_pizza(message, state)

    async def handle_cancel(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await message.answer(
            "üëã *–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!* –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–∏—Ü—Ü—ã! üçï",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
        await state.clear()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.router.message.register(self.start_command, Command("start"))

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.router.message.register(self.handle_create_pizza, Text("üçï –°–æ–∑–¥–∞—Ç—å –ø–∏—Ü—Ü—É"), PizzaStates.main_menu)
        self.router.message.register(self.handle_recipes, Text("üìñ –†–µ—Ü–µ–ø—Ç—ã"), PizzaStates.main_menu)
        self.router.message.register(self.handle_about, Text("‚ÑπÔ∏è –û –±–æ—Ç–µ"), PizzaStates.main_menu)
        self.router.message.register(self.handle_cancel, Text("‚ùå –û—Ç–º–µ–Ω–∞"), PizzaStates.main_menu)

        # –í—ã–±–æ—Ä —Ç–µ—Å—Ç–∞
        self.router.message.register(self.handle_back_to_main, Text("üîô –ù–∞–∑–∞–¥"), PizzaStates.choosing_dough)
        self.router.message.register(self.handle_dough_selection, PizzaStates.choosing_dough)

        # –í—ã–±–æ—Ä –Ω–∞—á–∏–Ω–∫–∏
        self.router.message.register(self.handle_back_to_dough, Text("üîô –ù–∞–∑–∞–¥"), PizzaStates.choosing_toppings)
        self.router.message.register(self.handle_toppings_selection, PizzaStates.choosing_toppings)

        # –†–µ—Ü–µ–ø—Ç—ã
        self.router.message.register(self.handle_back_to_main, Text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), PizzaStates.recipes_menu)
        self.router.message.register(self.handle_recipe_detail, PizzaStates.recipes_menu)

        # –û –±–æ—Ç–µ
        self.router.message.register(self.handle_back_to_main, Text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), PizzaStates.about_menu)

        # Fallback - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.router.message.register(self.handle_back_to_main)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            print("üéØ PizzaBot (–∫–Ω–æ–ø–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
            print("=" * 40)

            await self.dp.start_polling(self.bot)
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}")
        finally:
            await self.bot.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        initialize_bot()
        bot = PizzaBot(CONFIG)
        await bot.run()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
